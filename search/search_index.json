{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"deep-dives/functions/","text":"FUNCTIONs in Python First Glance: Question 1: How Python Consider Functions? C, in compiler's perspective, is a pattern of a series of operations. However, from programmer's perspective, there is almost no difference between a func and its return value. But what about Python? Revised version by chatgpt: In the compiler's perspective, C can be viewed as a pattern of a series of operations, where functions are essential components represented by machine instructions. However, from a programmer's perspective, the distinction between a function and its return value is minimal, as functions can be manipulated, assigned, and used in a manner akin to return values, offering a high degree of flexibility in programming. Answer: Python consider functions as first class object, which means it is more dymanic and focus not on the value, but on the process. Question 2: Why Python Can Store Function without First Determine its Type? Why Need to Assign Func to Var? Detailed and Low-Levele Tought Fuction pointers in C","title":"What are FUNCTIONs in Python?"},{"location":"deep-dives/functions/#functions-in-python","text":"","title":"FUNCTIONs in Python"},{"location":"deep-dives/functions/#first-glance","text":"","title":"First Glance:"},{"location":"deep-dives/functions/#question-1-how-python-consider-functions","text":"C, in compiler's perspective, is a pattern of a series of operations. However, from programmer's perspective, there is almost no difference between a func and its return value. But what about Python? Revised version by chatgpt: In the compiler's perspective, C can be viewed as a pattern of a series of operations, where functions are essential components represented by machine instructions. However, from a programmer's perspective, the distinction between a function and its return value is minimal, as functions can be manipulated, assigned, and used in a manner akin to return values, offering a high degree of flexibility in programming. Answer: Python consider functions as first class object, which means it is more dymanic and focus not on the value, but on the process.","title":"Question 1: How Python Consider Functions?"},{"location":"deep-dives/functions/#question-2-why-python-can-store-function-without-first-determine-its-type","text":"","title":"Question 2: Why Python Can Store Function without First Determine its Type?"},{"location":"deep-dives/functions/#why-need-to-assign-func-to-var","text":"","title":"Why Need to Assign Func to Var?"},{"location":"deep-dives/functions/#detailed-and-low-levele-tought","text":"","title":"Detailed and Low-Levele Tought"},{"location":"deep-dives/functions/#fuction-pointers-in-c","text":"","title":"Fuction pointers in C"},{"location":"deep-dives/operators/","text":"1. Types of *operators*: 1. Mapping Operators to Functions. This is the operator, which can be assigned to a variable and taken as a function. e.g. `ans = add(x, y)` 2. In-place Operators. This is the operator, which can add to an function for edition. e.g. `str.strip()` <div id=\"call-operators\">[operator in the `operator` module](https://docs.python.org/3/library/operator.html#mapping-operators-to-functions)</div> This work is concluded when doing [this](/cs61a/codes/letc01/operator_expressions.py) exercise. 2. Arithmetic 3. Bit 4. Logical 5. 6. Identity 7. Index in-place: - https://en.wikipedia.org/wiki/In-place_algorithm - https://www.geeksforgeeks.org/inplace-vs-standard-operators-python/ - https://stackoverflow.com/questions/5317817/python-in-place-functions -","title":"Operators"},{"location":"lectures/01/","text":"Lecture 01 - CS61A fa2022 Welcome to Learn English TAT Terms en zh_CN Supplement Example Complexity \u590d\u6742\u6027 procedural abstractions \u7a0b\u5e8f\u62bd\u8c61 data abstractions \u6570\u636e\u62bd\u8c61 programming paradigms \u7a0b\u5e8f\u8303\u5f0f Scheme a programming language regular expressions \u6b63\u5219\u8868\u8fbe\u5f0f IS A LANGUAGE! BNF a language Vocabs and Phrases en Explanation Example concurrently \u540c\u65f6 Prerequisites: MATH1A(maybe taken concurrently ) accomodation mandated \u83b7\u6388\u6743\u7684 All faculty and staff members are Mandated Reporters. mind-blowing \u5927\u5f00\u773c\u754c Appendix: Sexual Harassment See a full list in the UCOP policy on SVSH . \u4e2d\u6587\u7248\u672c\uff0c\u8acb\u6309\u9019\u88e1 Racism (-_-;) (+_+)","title":"01"},{"location":"lectures/01/#lecture-01-cs61a-fa2022","text":"","title":"Lecture 01 - CS61A fa2022"},{"location":"lectures/01/#welcome-to-learn-english","text":"TAT","title":"Welcome to Learn English"},{"location":"lectures/01/#terms","text":"en zh_CN Supplement Example Complexity \u590d\u6742\u6027 procedural abstractions \u7a0b\u5e8f\u62bd\u8c61 data abstractions \u6570\u636e\u62bd\u8c61 programming paradigms \u7a0b\u5e8f\u8303\u5f0f Scheme a programming language regular expressions \u6b63\u5219\u8868\u8fbe\u5f0f IS A LANGUAGE! BNF a language","title":"Terms"},{"location":"lectures/01/#vocabs-and-phrases","text":"en Explanation Example concurrently \u540c\u65f6 Prerequisites: MATH1A(maybe taken concurrently ) accomodation mandated \u83b7\u6388\u6743\u7684 All faculty and staff members are Mandated Reporters. mind-blowing \u5927\u5f00\u773c\u754c","title":"Vocabs and Phrases"},{"location":"lectures/01/#appendix-sexual-harassment","text":"See a full list in the UCOP policy on SVSH . \u4e2d\u6587\u7248\u672c\uff0c\u8acb\u6309\u9019\u88e1 Racism (-_-;) (+_+)","title":"Appendix: Sexual Harassment"},{"location":"lectures/02/","text":"Lecture 02 - CS61A fa2022 To-do How to publish slides? \" Zoom \" rules - Learning English Time Expressions and Values Expressions: 'a' + 'hoy' Value: 'ahoy' Expressions Two ways and combination: 1+2 ( expression with operation ) pow(2,3) ( call expression ) pow() is built-in , while others (like add() ) must be imported by from operator import add . More opreators . Why need add() ? How Python evaluates a call expression: Evaluate the operator Evaluate the operands Apply the operator (a function) to the evaluated operands (arguments) Operators and operands are also expressions, so they must be evaluated to discover their values. What does it mean? functions and argument are not values? Answer: See the following example . Nested Expressions: Expression Tree Recursively or iteratively? Name: just the name of the var . Binding a name to a value : (English!) var_a (name) = (assigned by) 1 (value) var_a (name) = (assigned by) 1 + 1 (expression) Variable: A name that is bound to a value. More of operators . Environment Diagrams Just a GUI simple debuger. Functions function , args and return value def Syntax: def < name > ( < parameters > ): # \u2190 Function signature return < return expression > # \u2190 Function body A def statement creates a function object with certain parameters and a body and binds it to a name in the current environment. Function is Object , which is very wierd for me with only little background of C. See more here . Example: f = min f = max g = min h = max max = g max ( f ( 2 , g ( h ( 1 , 5 ), 3 )), 4 ) # Note the parameters and return values of functions. Calling a function is creating a stack frame. Environment: Assembly consisting of all frames of stacks of a specific scope. Name lookup rules: local -> global -> NameError Terms en zh_CN Supplement Example Anatomy of a Call Expression \u8c03\u7528\u8868\u8fbe\u5f0f\u5256\u6790 call expressions : e.g. pow(10,3) = 1000 anatomy : \u89e3\u5256\u5b66 evaluate expressions \u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c The Python interpreter evaluates expressions and displays their values. in this sequence in this block of codes environment diagrams \u73af\u5883\u56fe a visualization of how Python interprets a program Vocabs and Phrases en Explanation Example tangential \u5207\u5411\u7684\uff1b\u5408...\u7684 If you have unanswered or tangential questions, post in the Piazza Q&A thread.","title":"02"},{"location":"lectures/02/#lecture-02-cs61a-fa2022","text":"","title":"Lecture 02 - CS61A fa2022"},{"location":"lectures/02/#to-do","text":"How to publish slides?","title":"To-do"},{"location":"lectures/02/#zoom-rules-learning-english-time","text":"","title":"\"Zoom\" rules - Learning English Time"},{"location":"lectures/02/#expressions-and-values","text":"Expressions: 'a' + 'hoy' Value: 'ahoy'","title":"Expressions and Values"},{"location":"lectures/02/#expressions","text":"Two ways and combination: 1+2 ( expression with operation ) pow(2,3) ( call expression ) pow() is built-in , while others (like add() ) must be imported by from operator import add . More opreators . Why need add() ? How Python evaluates a call expression: Evaluate the operator Evaluate the operands Apply the operator (a function) to the evaluated operands (arguments) Operators and operands are also expressions, so they must be evaluated to discover their values. What does it mean? functions and argument are not values? Answer: See the following example . Nested Expressions: Expression Tree Recursively or iteratively? Name: just the name of the var . Binding a name to a value : (English!) var_a (name) = (assigned by) 1 (value) var_a (name) = (assigned by) 1 + 1 (expression) Variable: A name that is bound to a value. More of operators .","title":"Expressions"},{"location":"lectures/02/#environment-diagrams","text":"Just a GUI simple debuger.","title":"Environment Diagrams"},{"location":"lectures/02/#functions","text":"function , args and return value def Syntax: def < name > ( < parameters > ): # \u2190 Function signature return < return expression > # \u2190 Function body A def statement creates a function object with certain parameters and a body and binds it to a name in the current environment. Function is Object , which is very wierd for me with only little background of C. See more here . Example: f = min f = max g = min h = max max = g max ( f ( 2 , g ( h ( 1 , 5 ), 3 )), 4 ) # Note the parameters and return values of functions. Calling a function is creating a stack frame. Environment: Assembly consisting of all frames of stacks of a specific scope. Name lookup rules: local -> global -> NameError","title":"Functions"},{"location":"lectures/02/#terms","text":"en zh_CN Supplement Example Anatomy of a Call Expression \u8c03\u7528\u8868\u8fbe\u5f0f\u5256\u6790 call expressions : e.g. pow(10,3) = 1000 anatomy : \u89e3\u5256\u5b66 evaluate expressions \u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c The Python interpreter evaluates expressions and displays their values. in this sequence in this block of codes environment diagrams \u73af\u5883\u56fe a visualization of how Python interprets a program","title":"Terms"},{"location":"lectures/02/#vocabs-and-phrases","text":"en Explanation Example tangential \u5207\u5411\u7684\uff1b\u5408...\u7684 If you have unanswered or tangential questions, post in the Piazza Q&A thread.","title":"Vocabs and Phrases"},{"location":"lectures/03/","text":"Lecture 03 - CS61A fa2022 Side Effect (and Return Values) Side effect: The action besides returning value is a side effect of a function. Fucntions can deal with the params either way. e.g. print() will have a side effect of printing things on the monitor and return \" nothing \", which actually is None . None is a type of NoneType , which is unsupported for operand. e.g. add(None, None) and None + 1 both returns TypeError None will be returned if no value has been explicitly returned. Is this better? Revised Version by Chatgpt Your sentence is already clear and grammatically correct. However, you can make it slightly more concise and idiomatic: \"None will be returned if no value is explicitly provided.\" This version conveys the same meaning in a more streamlined manner. print(None) and print(print(1), print(2)) both return None , while the latter one also has side effects to print 1 and 2 More Function Features Default value: Operands of Python can have defined default value, just like C++ Multiple return values: Python supports return val1, val2 , which is not supported in C++ Doctests: A powerful tools for case test. See more here Boolean Expression Google Maps uses a boolean to decide whether to avoid highways in driving directions: avoid_highways = True Twitter uses a boolean to remember where the user allows personalized ads: personalized_ads = False How do they know? Twitter is not be a open source software, is it? Stupid Question! Answer: Docs ! e.g. Twitter params - dnt Comparison , logical and their compound operation. Use == for if_equal! Why? Inspired by CS50P, compiler cannot tell the difference between assign and if_equal . Trick: return grade > 65 without if and else Statement Revice that, for structure of a function : def <name>(<parameters>): # \u2190 Function signature return <return expression> # \u2190 Function body For compound statements , which is a statement that contains other statements: <header>: # CLAUSE <statement> # SUITE <statement> # a sequence of statements Conditional statement: if , else : no ( and ) . elif supported. Loops: while , no ( and ) . break and continue Why continue is not mentioned in ppt? for is somehow complicated: Syntax: for <index_val> in <array>: . Beware to append : . Usage: for x in [\"apple\", \"banana\", \"cherry\"]: for x in fruits: # fruits=[\"apple\", \"banana\", \"cherry\"] for x in range(<from>, <to>, <increasment>): for x in \"string\" # x will be 's' 't' 'r' 'i' 'n' and 'g' Why for is not mentioned? pass : placeholder statement, avoiding errors for somewhere not implemented. Note: ; in C is of the same use idle in OS is somehow similar ;; in SHELL is not related, which is used only after the end of each case suite Terms en zh_CN Supplement Example Vocabs and Phrases en Explanation Example","title":"ex03"},{"location":"lectures/03/#lecture-03-cs61a-fa2022","text":"","title":"Lecture 03 - CS61A fa2022"},{"location":"lectures/03/#side-effect-and-return-values","text":"Side effect: The action besides returning value is a side effect of a function. Fucntions can deal with the params either way. e.g. print() will have a side effect of printing things on the monitor and return \" nothing \", which actually is None . None is a type of NoneType , which is unsupported for operand. e.g. add(None, None) and None + 1 both returns TypeError None will be returned if no value has been explicitly returned. Is this better? Revised Version by Chatgpt Your sentence is already clear and grammatically correct. However, you can make it slightly more concise and idiomatic: \"None will be returned if no value is explicitly provided.\" This version conveys the same meaning in a more streamlined manner. print(None) and print(print(1), print(2)) both return None , while the latter one also has side effects to print 1 and 2","title":"Side Effect (and Return Values)"},{"location":"lectures/03/#more-function-features","text":"Default value: Operands of Python can have defined default value, just like C++ Multiple return values: Python supports return val1, val2 , which is not supported in C++ Doctests: A powerful tools for case test. See more here","title":"More Function Features"},{"location":"lectures/03/#boolean-expression","text":"Google Maps uses a boolean to decide whether to avoid highways in driving directions: avoid_highways = True Twitter uses a boolean to remember where the user allows personalized ads: personalized_ads = False How do they know? Twitter is not be a open source software, is it? Stupid Question! Answer: Docs ! e.g. Twitter params - dnt Comparison , logical and their compound operation. Use == for if_equal! Why? Inspired by CS50P, compiler cannot tell the difference between assign and if_equal . Trick: return grade > 65 without if and else","title":"Boolean Expression"},{"location":"lectures/03/#statement","text":"Revice that, for structure of a function : def <name>(<parameters>): # \u2190 Function signature return <return expression> # \u2190 Function body For compound statements , which is a statement that contains other statements: <header>: # CLAUSE <statement> # SUITE <statement> # a sequence of statements Conditional statement: if , else : no ( and ) . elif supported. Loops: while , no ( and ) . break and continue Why continue is not mentioned in ppt? for is somehow complicated: Syntax: for <index_val> in <array>: . Beware to append : . Usage: for x in [\"apple\", \"banana\", \"cherry\"]: for x in fruits: # fruits=[\"apple\", \"banana\", \"cherry\"] for x in range(<from>, <to>, <increasment>): for x in \"string\" # x will be 's' 't' 'r' 'i' 'n' and 'g' Why for is not mentioned? pass : placeholder statement, avoiding errors for somewhere not implemented. Note: ; in C is of the same use idle in OS is somehow similar ;; in SHELL is not related, which is used only after the end of each case suite","title":"Statement"},{"location":"lectures/03/#terms","text":"en zh_CN Supplement Example","title":"Terms"},{"location":"lectures/03/#vocabs-and-phrases","text":"en Explanation Example","title":"Vocabs and Phrases"},{"location":"lectures/04/","text":"","title":"04"},{"location":"lectures/05/","text":"","title":"05"},{"location":"lectures/06/","text":"","title":"06"},{"location":"lectures/07/","text":"","title":"07"},{"location":"lectures/08/","text":"","title":"08"},{"location":"lectures/09/","text":"","title":"09"},{"location":"lectures/10/","text":"","title":"10"},{"location":"lectures/11/","text":"","title":"11"},{"location":"lectures/12/","text":"","title":"12"},{"location":"lectures/13/","text":"","title":"13"},{"location":"lectures/14/","text":"","title":"14"},{"location":"lectures/15/","text":"","title":"15"},{"location":"lectures/16/","text":"","title":"16"},{"location":"lectures/17/","text":"","title":"17"},{"location":"lectures/18/","text":"","title":"18"},{"location":"lectures/19/","text":"","title":"19"},{"location":"lectures/20/","text":"","title":"20"},{"location":"lectures/21/","text":"","title":"21"},{"location":"lectures/22/","text":"","title":"22"},{"location":"lectures/23/","text":"","title":"23"},{"location":"lectures/24/","text":"","title":"24"},{"location":"lectures/25/","text":"","title":"25"},{"location":"lectures/26/","text":"","title":"26"},{"location":"lectures/27/","text":"","title":"27"},{"location":"lectures/28/","text":"","title":"28"},{"location":"lectures/29/","text":"","title":"29"},{"location":"lectures/30/","text":"","title":"30"},{"location":"lectures/31/","text":"","title":"31"},{"location":"lectures/32/","text":"","title":"32"},{"location":"lectures/33/","text":"","title":"33"},{"location":"lectures/34/","text":"","title":"34"},{"location":"lectures/35/","text":"","title":"35"},{"location":"lectures/36/","text":"","title":"36"},{"location":"lectures/37/","text":"","title":"37"},{"location":"lectures/ex02/","text":"Exercise 02 - CS61A fa2022 Fortune Teller \"\"\" Why pay a fortune teller when you can just program your fortune yourself? Write a function named tell_fortune that: * takes 3 arguments: job title, partner's name, geographic location. * returns a fortune of the form: 'You will be a {job_title} in {location} living with {partner}. \"\"\" def tell_fortune(job_title, location, partner): \"\"\" >>> tell_fortune('bball player', 'Spain', 'Shaqira') 'You will be a bball player in Spain living with Shaqira.' >>> tell_fortune('farmer', 'Kansas', 'C3PO') 'You will be a farmer in Kansas living with C3PO.' >>> tell_fortune('Elvis Impersonator', 'Russia', 'Karl the Fog') 'You will be a Elvis Impersonator in Russia living with Karl the Fog.' \"\"\" return f\"You will be a {job_title} in {location} living with {partner}.\" print(tell_fortune('bball player', 'Spain', 'Shaqira')) Operator Expression from operator import add, sub, mul, truediv, floordiv, mod \"\"\" In the console, type expressions that use function calls and correspond to each arithmetic expression. Use the console to check your work. Useful documentation: https://docs.python.org/3/library/operator.html#mapping-operators-to-functions \"\"\" # Q1: 30 + 2 print(add(30,2)) # Q2: 30 - 2 print(sub(30,2)) # Q3: 30 * 2 print(mul(30,2)) # Q4: 30 / 2 print(truediv(30, 2)) # Q5: 30 % 2 print(mod(30, 2)) # Nested! # Q6: 30 + (2 * 4) print(add(20,mul(2,4))) # Q7: 3 * (10 - 2) print(mul(3,sub(10,2))) # Challenge! # Q8: (3 ** (365/52)) - 1 print(sub(pow(3, truediv(365, 52)), 1)) # Q9: (25 // 4) - (25 / 4) print(sub(floordiv(25, 4), (sub(25, 4))))","title":"ex02"},{"location":"lectures/ex02/#exercise-02-cs61a-fa2022","text":"","title":"Exercise 02 - CS61A fa2022"},{"location":"lectures/ex02/#fortune-teller","text":"\"\"\" Why pay a fortune teller when you can just program your fortune yourself? Write a function named tell_fortune that: * takes 3 arguments: job title, partner's name, geographic location. * returns a fortune of the form: 'You will be a {job_title} in {location} living with {partner}. \"\"\" def tell_fortune(job_title, location, partner): \"\"\" >>> tell_fortune('bball player', 'Spain', 'Shaqira') 'You will be a bball player in Spain living with Shaqira.' >>> tell_fortune('farmer', 'Kansas', 'C3PO') 'You will be a farmer in Kansas living with C3PO.' >>> tell_fortune('Elvis Impersonator', 'Russia', 'Karl the Fog') 'You will be a Elvis Impersonator in Russia living with Karl the Fog.' \"\"\" return f\"You will be a {job_title} in {location} living with {partner}.\" print(tell_fortune('bball player', 'Spain', 'Shaqira'))","title":"Fortune Teller"},{"location":"lectures/ex02/#operator-expression","text":"from operator import add, sub, mul, truediv, floordiv, mod \"\"\" In the console, type expressions that use function calls and correspond to each arithmetic expression. Use the console to check your work. Useful documentation: https://docs.python.org/3/library/operator.html#mapping-operators-to-functions \"\"\" # Q1: 30 + 2 print(add(30,2)) # Q2: 30 - 2 print(sub(30,2)) # Q3: 30 * 2 print(mul(30,2)) # Q4: 30 / 2 print(truediv(30, 2)) # Q5: 30 % 2 print(mod(30, 2)) # Nested! # Q6: 30 + (2 * 4) print(add(20,mul(2,4))) # Q7: 3 * (10 - 2) print(mul(3,sub(10,2))) # Challenge! # Q8: (3 ** (365/52)) - 1 print(sub(pow(3, truediv(365, 52)), 1)) # Q9: (25 // 4) - (25 / 4) print(sub(floordiv(25, 4), (sub(25, 4))))","title":"Operator Expression"},{"location":"lectures/ex03/","text":"Exercise 03 - CS61A fa2022 Prime Factors def is_prime(n): \"\"\"Return True iff N is prime. >>> is_prime(1) False >>> is_prime(2) True >>> is_prime(8) False >>> is_prime(21) False >>> is_prime(23) True \"\"\" return n > 1 and smallest_factor(n) == n def smallest_factor(n): \"\"\"Returns the smallest value k>1 that evenly divides N.\"\"\" for x in range(2, n + 1): if not n % x: return x return -1 def print_factors(n): \"\"\"Print the prime factors of N. >>> print_factors(180) 2 2 3 3 5 \"\"\" x = smallest_factor(n) print(x) if not is_prime(n): return print_factors(n // x)","title":"Exercise 03 - CS61A fa2022"},{"location":"lectures/ex03/#exercise-03-cs61a-fa2022","text":"","title":"Exercise 03 - CS61A fa2022"},{"location":"lectures/ex03/#prime-factors","text":"def is_prime(n): \"\"\"Return True iff N is prime. >>> is_prime(1) False >>> is_prime(2) True >>> is_prime(8) False >>> is_prime(21) False >>> is_prime(23) True \"\"\" return n > 1 and smallest_factor(n) == n def smallest_factor(n): \"\"\"Returns the smallest value k>1 that evenly divides N.\"\"\" for x in range(2, n + 1): if not n % x: return x return -1 def print_factors(n): \"\"\"Print the prime factors of N. >>> print_factors(180) 2 2 3 3 5 \"\"\" x = smallest_factor(n) print(x) if not is_prime(n): return print_factors(n // x)","title":"Prime Factors"}]}